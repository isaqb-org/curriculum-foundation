import static groovy.io.FileType.FILES

class LearningGoals {
    String id
    String title
    int chapter
    int chapterIndex

    LearningGoals(String id, String title, String chapter, String chapterIndex) {
        this.id = id
        this.title = title
        this.chapter = Integer.valueOf(chapter)
        this.chapterIndex = Integer.valueOf(chapterIndex)
    }
}

task includeLearningGoals(
        description: 'collect learning Goals from source files and include them as listing',
        group: 'isaqb-curriculum'
) {
    doLast {
        def contentDE = createLearningGoalsContent("DE", ~/\[\[(LG-\d*-\d*)\]\]\s*==== (LZ (\d*)-(\d*).*)/, "Verzeichnis der Lernziele")
        def contentEN = createLearningGoalsContent("EN", ~/\[\[(LG-\d*-\d*)\]\]\s*==== (LG (\d*)-(\d*).*)/, "List of Learning Goals")

        writeLearningGoals(contentDE, contentEN)
    }

    ext.createLearningGoalsContent = { language, pattern, headline ->
        def learningGoals = collectLearningGoals(pattern)

        sortLearningGoals(learningGoals)

        return compileLearningGoals(language, headline, learningGoals)
    }

    ext.collectLearningGoals = { pattern ->
        def docsFolder = new File(projectDir, '/docs')
        def learningGoals = []

        docsFolder.traverse(type: FILES) { file ->

            if (file.name ==~ '.*[.](ad|adoc|asciidoc)$') {
                def content = file.text
                def matcher = content =~ pattern

                for (result in matcher.results()) {

                    def id = result.group(1)
                    def title = result.group(2)
                    def chapter = result.group(3)
                    def chapterIndex = result.group(4)
                    learningGoals.add(new LearningGoals(id, title, chapter, chapterIndex))
                }
            }
        }

        return learningGoals
    }
}

ext.sortLearningGoals = { learningGoals ->
    learningGoals.sort { a, b ->
        if (a.chapter == b.chapter) {
            a.chapterIndex <=> b.chapterIndex
        } else {
            a.chapter <=> b.chapter
        }
    }
}

ext.compileLearningGoals = { language, headline, learningGoals ->
    def content = '' << ''

    content <<= "// tag::" + language + "[]\n"
    content <<= "== " + headline + "\n\n"

    learningGoals.each { learningObjective ->
        content <<= "- <<" + learningObjective.id + ", " + learningObjective.title + ">>\n"
    }

    content <<= "// end::" + language + "[]\n"

    return content.toString()
}

ext.writeLearningGoals = { contentDE, contentEN ->
    def docsFolder = new File(projectDir, '/docs')
    def outFile = new File(docsFolder, '/learning-goals.adoc')

    println "Learning goals file: " + outFile.getAbsolutePath()


    outFile.withWriter('UTF-8') { writer ->
        writer.writeLine("// this is autogenerated - please do not modify manually!\n")
        writer.writeLine(contentDE)
        writer.writeLine(contentEN)
    }
}

